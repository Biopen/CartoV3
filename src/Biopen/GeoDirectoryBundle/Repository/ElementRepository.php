<?php

/**
 * This file is part of the MonVoisinFaitDuBio project.
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @copyright Copyright (c) 2016 Sebastian Castro - 90scastro@gmail.com
 * @license    MIT License
 * @Last Modified time: 2017-05-18 15:40:12
 */
 

namespace Biopen\GeoDirectoryBundle\Repository;
use Doctrine\ODM\MongoDB\DocumentRepository;

/**
 * ElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElementRepository extends DocumentRepository
{
  // public function findAll()
  // {
  //   $qb = $this->createQueryBuilder('BiopenGeoDirectoryBundle:Element');
  //   return $qb->select('compactJson')->hydrate(false)->getQuery()->execute()->toArray(); 
  // }

  public function findDuplicatesAround($lat, $lng, $distance, $maxResults, $text)
  {
    $qb = $this->createQueryBuilder('BiopenGeoDirectoryBundle:Element');

    $expr = $qb->expr()->operator('$text', array('$search' => $text));
    // convert kilometre in degrees
    $radius = $distance / 110;
    return $qb  //->limit($maxResults)
                ->equals($expr->getQuery())
                ->field('coordinates')->withinCenter((float)$lat, (float)$lng, $radius)
                
                ->sortMeta('score', 'textScore')
                ->hydrate(false)->getQuery()->execute()->toArray();
    
  }

  public function findWhithinBoxes($bounds, $optionId, $getFullRepresentation)
  {
    $results = [];

    $qb = $this->createQueryBuilder('BiopenGeoDirectoryBundle:Element');

    //dump("quering getFullRepresentation " . $getFullRepresentation);

    foreach ($bounds as $key => $bound) 
    {
      if (count($bound) == 4)
      {
        $qb = $this->createQueryBuilder('BiopenGeoDirectoryBundle:Element');

        $qb->field('status')->gte(-1);

        if ($optionId && $optionId != "all")
        {
          //$qb->where("function() { return this.optionValues.some(function(optionValue) { return optionValue.optionId == " . $optionId . "; }); }");
          $qb->field('optionValues.optionId')->in(array((float) $optionId));
        }

        // get elements within box
        $qb->field('coordinates')->withinBox((float) $bound[1], (float) $bound[0], (float) $bound[3], (float) $bound[2]);

        // get json representation
        if ($getFullRepresentation == 'true') 
          {
            $qb->select('fullJson'); 
          }
        else
        {
          $qb->select('compactJson');   
        } 

        // execute request   
        $array = $qb->hydrate(false)->getQuery()->execute()->toArray(); 
        $results = array_merge($results, $array);  
      }
    }

    return $results;
  }

  public function findElementsWithText($text)
  {
    $qb = $this->createQueryBuilder('BiopenGeoDirectoryBundle:Element');

    $expr = $qb->expr()->operator('$text', array('$search' => (string) $text));
    
    return $qb  //->limit($maxResults)
                ->equals($expr->getQuery())        
                ->sortMeta('score', 'textScore')
                ->hydrate(false)->getQuery()->execute()->toArray();
    
  }
}


