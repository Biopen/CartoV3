{% extends "@BiopenCoreBundle/page-layout.html.twig" %}

{% set pageName = 'directory' %}
{% set navTitle = "La carte" %}

{% block title %}{% endblock %}

{# Stylessheets #}
{% block page_stylesheets %}
  
{% endblock %}

{# BODY CONTENT #}
{% block body_content %}

  <div id="directory-container"></div>

{% endblock %}

{% block javascripts %}  

  <script>

    {% import _self as this %}

    $(document).ready(function()
    {
        carto = goGoCarto('#directory-container', {
            security:
            {
                userRoles: {{ userGogocartoRole | json_encode | raw }},
                userEmail: '{{ userEmail }}',                
                loginAction: function() { $("#popup-login").openModal(); }
            },
            text:
            {
                element: "{{ config.elementDisplayName | raw }}" ,
                elementDefinite: "{{ config.elementDisplayNameDefinite | raw }}" ,
                elementIndefinite: "{{ config.elementDisplayNameIndefinite | raw }}" ,
                elementPlural: "{{ config.elementDisplayNamePlural | raw }}",
                collaborativeModeration: {{ config.collaborativeModerationExplanations | json_encode | raw }},
            },
            data:
            {
                taxonomy: {{ taxonomyJson | raw }},
                elements: "{{ path('biopen_api_elements_index') }}",
                requestByBounds: true,
            },
            menu:
            {
                width: {{ config.menu.width ? config.menu.width : 'undefined' }},
                smallWidthStyle: {{ config.menu.smallWidthStyle ? 'true' : 'false' }},
                showOnePanePerMainOption: {{ config.menu.showOnePanePerMainOption ? 'true' : 'false' }},
                showCheckboxForMainFilterPane: {{ config.menu.showCheckboxForMainFilterPane  ? 'true' : 'false'}},
                showCheckboxForSubFilterPane: {{ config.menu.showCheckboxForSubFilterPane ? 'true' : 'false' }}
            },
            features:
            {
                listMode: {{ this.getConfigFrom(config.listModeFeature) }},
                searchPlace: {{ this.getConfigFrom(config.searchPlaceFeature) }},
                searchElements: {{ this.getConfigFrom(config.searchElementsFeature, path('biopen_api_elements_from_text')) }},  
                searchGeolocate: {{ this.getConfigFrom(config.searchGeolocateFeature) }},
                share:    {{ this.getConfigFrom(config.shareFeature,  path('biopen_report_error_for_element')) }},
                report:   {{ this.getConfigFrom(config.reportFeature, path('biopen_report_error_for_element')) }},
                favorite: {{ this.getConfigFrom(config.favoriteFeature) }},
                export:   {{ this.getConfigFrom(config.exportIframeFeature) }},
                pending:  {{ this.getConfigFrom(config.pendingFeature) }},
                directModeration:  {{ this.getConfigFrom(config.directModerationFeature) }},
                moderation:  {{ this.getConfigFrom(config.directModerationFeature, path('biopen_resolve_reports_element')) }},
                elementHistory: {{ this.getConfigFrom(config.directModerationFeature) }},
                directions: {{ this.getConfigFrom(config.directionsFeature) }},
                layers: {{ this.getConfigFrom(config.layersFeature) }},
                mapdefaultview: {{ this.getConfigFrom(config.mapDefaultViewFeature) }},
                

                // overide roles so even if edit is just allowed to user or admin, an anonymous will see
                // the edit button in the element info menu
                edit:     {{ this.getConfigFrom(
                                config.editFeature, 
                                path('biopen_element_edit', {'id':'fake'}) | replace({'fake':''}),
                                config.editFeature.isOnlyAllowedForAdmin ? {} : {roles: "['anonymous', 'user', 'admin']"}
                           ) }},
                delete:   {{ this.getConfigFrom(config.deleteFeature, path('biopen_delete_element')) }},

                vote:     {{ this.getConfigFrom(config.collaborativeModerationFeature, path('biopen_vote_for_element')) }}, 
                sendMail: {{ this.getConfigFrom(config.sendMailFeature, path('biopen_element_send_mail')) }}, 
                stamp: {{ this.getConfigFrom(
                        config.stampFeature, 
                        path('biopen_element_stamp'),
                        { "options": { "allowedStamps": allowedStamps } } 
                    ) }},  
                customPopup: {{ this.getConfigFrom(
                        config.customPopupFeature, 
                        null,
                        { "options": { 
                            "text": config.customPopupText,
                            "showOnlyOnce": config.customPopupShowOnlyOnce,
                            "id": config.customPopupId 
                        } } 
                    ) }},  
                
            },
            infobar:
            {
                width: {{ config.infobar.width ? config.menu.width : 'undefined' }},
                headerTemplate: {
                    content: {{ config.infobar.headerTemplate ? config.infobar.headerTemplate | json_encode | raw : 'undefined' }}
                },
                bodyTemplate: {
                    content: {{ config.infobar.bodyTemplate ? config.infobar.bodyTemplate | json_encode | raw : 'undefined' }}
                }
            },
            map:
            {
                defaultBounds: {{ config.getDefaultBounds | json_encode | raw }},
                defaultTileLayer: "{{ config.defaultTileLayer.name }}",
                tileLayers : {{ tileLayers | json_encode | raw }},
                saveViewportInCookies : {{ config.saveViewportInCookies ? 'true' : 'false' }},
                saveTileLayerInCookies : {{ config.saveTileLayerInCookies ? 'true' : 'false' }},
            },
            colors:
            {
                neutralDark: '{{ config.neutralDarkColor }}' ,
                neutralDarkTransparent: '{{ config.neutralDarkTransparentColor }}',
                neutralSoftDark: '{{ config.neutralSoftDarkColor }}',
                neutral: '{{ config.neutralColor }}',
                neutralLight: '{{ config.neutralLightColor }}',
                secondary: '{{ config.primaryColor }}',
                primary: '{{ config.secondaryColor }}',
                background: '{{ config.backgroundColor }}',

                textColor: '{{ config.neutralDarkColor }}',
                searchBar: '{{ config.searchBarColor }}',
                disableColor: '{{ config.disableColor }}',
                listTitle: '{{ config.listTitleColor }}',
                listTitleBackBtn: '{{ config.listTitleBackBtnColor }}',
                listTitleBackground: '{{ config.listTitleBackgroundColor }}',

                mainFont: '{{ config.mainFont }}',
                titleFont: '{{ config.titleFont }}',
                taxonomyMainTitleFont: '{{ config.taxonomyMainTitleFont }}',  
            }     
        }); 
    });   

  </script>  

{% endblock %}

{% macro getConfigFrom(feature, path, overide) %}
    {% set overide = overide | default({}) %}
    { 
        {% if overide.active is defined %}
            active: {{ overide.active ? 'true' : 'false' }},
        {% else %}
            active: {{ feature.active ? 'true' : 'false' }},
        {% endif %} 
        inIframe: {{ feature.activeInIframe ? 'true' : 'false' }},
        url: "{{ path | default('') }}", 
        {% if overide.roles is defined %}
            roles: {{ overide.roles | raw }},
        {% else %}
            roles: {{ feature.getAllowedRoles | json_encode | raw }},
        {% endif %}

        {% if overide.options is defined %}
            options: {{ overide.options | json_encode | raw }}
        {% endif %}
    }
{% endmacro %}
